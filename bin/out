#!/bin/sh

. $(dirname $0)/common.sh

load_env

if [ "true" = "$( jq -r '.params.delete' < /tmp/stdin )" ] ; then
  load_stack

  REM 'deleting stack'
  
  aws cloudformation delete-stack --stack-name "$STACK_NAME" \
    > /tmp/result
  
  REM 'waiting for completion'
  
  export STACK_NAME=$( jqstack '.Stacks[0].StackId' )
  
  TIMED_OUT=true
  
  for s in $( seq 360 ) ; do
    sleep 5
    
    load_stack
    
    if is_stack_completed ; then
      TIMED_OUT=''
      break
    elif is_stack_errored ; then
      fatal "delete-stack failed: $( jqstack '.Stacks[0].StackStatusReason' )"
    fi
  done
  
  if [ -n "$TIMED_OUT" ] ; then
    fatal "delete-stack timed out"
  fi
  
  REM 'completed'
  
  jq -c -n \
    --arg arn "$STACK_NAME" \
    '{ "version": { "arn": $arn, "time": "DELETED" } }' >&3
  
  exit
fi

###
REM 'looking for stack'
###

( aws cloudformation get-template --stack-name "$STACK_NAME" 2>/dev/null || echo '{"TemplateBody":{}}' ) \
  | jq -r -S '.TemplateBody' \
  > /tmp/stack-template-old.sorted

TEMPLATE=$( jq -r '.params.template' < /tmp/stdin )

jq -S '.' \
  < "$TEMPLATE" \
  > /tmp/stack-template-new.sorted

if [ $( stat -c "%s" /tmp/stack-template-old.sorted ) -gt 3 ] ; then
  load_stack
  STACK_ACTION=update-stack
  jqstack '[ .Stacks[0].Parameters // [] | sort_by(.ParameterKey) | .[] | { "ParameterKey": .ParameterKey, "ParameterValue": .ParameterValue } ]' \
    > /tmp/stack-parameters-old
  
  REM "found stack $( jqstack '.Stacks[0].StackId' )"
else
  STACK_ACTION=create-stack
  echo '{}' > /tmp/stack-parameters-old
  
  REM 'no stack found'
fi

#
# parameters
#

PARAMETERS=$( jq -r '.params.parameters // ""' < /tmp/stdin )
PARAMETERS_AWS=$( jq -r '.params.parameters_aws // ""' < /tmp/stdin )
PARAMETERS_ARG=''

if [ -n "$PARAMETERS" ] ; then
  jq -c 'to_entries | sort_by(.key) | map({ "ParameterKey": .key, "ParameterValue": .value })' \
    < "$PARAMETERS" \
    > /tmp/stack-parameters-new
  
  PARAMETERS_ARG='--parameters=file:///tmp/stack-parameters-new'
elif [ -n "$PARAMETERS_AWS" ] ; then
  cp "$PARAMETERS_AWS" /tmp/stack-parameters-new
  PARAMETERS_ARG='--parameters=file:///tmp/stack-parameters-new'
else
  echo '[]' > /tmp/stack-parameters-new
fi

#
# capabilities
#

CAPABILITIES=$( jq -r '( .params.capabilities // []) | join(" ")' < /tmp/stdin )
CAPABILITIES_ARG=''

if [ -n "$CAPABILITIES" ] ; then
  CAPABILITIES_ARG="--capabilities=$CAPABILITIES"
fi

#
# tags
#

TAGS=$( jq -r '.params.tags // ""' < /tmp/stdin )
TAGS_ARG=''

if [ -n "$TAGS" ] ; then
  jq -c 'to_entries |  sort_by(.key) | map({ "Key": .key, "Value": .value })' \
    < "$TAGS" \
    > /tmp/tags
  
  TAGS_ARG='--tags=file:///tmp/tags'
fi

#
# execute
#

if ! cmp -s /tmp/stack-template-old.sorted /tmp/stack-template-new.sorted \
|| ! cmp -s /tmp/stack-parameters-old /tmp/stack-parameters-new ; then
  REM 'applying new stack configuration'
  
  aws cloudformation $STACK_ACTION \
    $CAPABILITIES_ARG $PARAMETERS_ARG $TAGS_ARG \
    --stack-name="$STACK_NAME" \
    --template-body="file://$TEMPLATE" \
    > /tmp/result
  
  REM 'waiting for completion'
  
  TIMED_OUT=true
  
  for s in $( seq 360 ) ; do
    sleep 5
    
    load_stack
    
    if is_stack_completed ; then
      TIMED_OUT=''
      break
    elif is_stack_errored ; then
      fatal "$STACK_ACTION failed: $( jqstack '.Stacks[0].StackStatusReason' )"
    fi
  done
  
  if [ -n "$TIMED_OUT" ] ; then
    fatal "$STACK_ACTION timed out"
  fi
  
  REM 'completed'
fi

#
# version
#

jqstack '.Stacks[0] | { "version": { "arn" : .StackId, "time" : ( .LastUpdatedTime // .CreationTime ) } }' >&3
